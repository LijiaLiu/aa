package playlist;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.RandomAccessFile;

public class DTLog {
	
	private static String file;

	public DTLog(String file) {
		this.file = file;
	}
	
	public void clearDTLog() {
		try {
			BufferedWriter buffer = new BufferedWriter(new FileWriter(file));
			buffer.append("");
			buffer.flush();
		} catch (IOException e) {
			System.out.println("Write to DT log failed: " + e);
		}
	}
	
	public void writeDTLog(String text) {
		try {
			BufferedWriter buffer = new BufferedWriter(new FileWriter(file, true));
			buffer.append(text + "\n");
			buffer.flush();
		} catch (IOException e) {
			System.out.println("Write to DT log failed: " + e);
		}
		
	}
	
	public String getFileName(){
		
		return file;
	}
	
	/// new
	public boolean existFile(){
		
		File f = new File(file);
		if(f.exists()) { /* do something */
			
			return true;
			
		}else{
			
			return false;
		}
		
	}
	
	public String readDTLogFirstLine() {
			BufferedReader buffer;
			String text = null;
			try {
				buffer = new BufferedReader(new FileReader(file));
				try {
					text = buffer.readLine();
				} catch (IOException e) {
					System.out.println("Read DT log failed: " + e);
				}
				try {
					buffer.close();
				} catch (IOException e) {
					System.out.println("Close DT log failed: " + e);
				}
			} catch (FileNotFoundException e) {
				System.out.println("DT log not exists: " + e);
			}
			return text;
	}
	
	public String readDTLogLastLine() {
		BufferedReader buffer = null;
	    String last = null, line;
		
		try {
			buffer = new BufferedReader(new FileReader(file));
		} catch (FileNotFoundException e) {
			System.out.println("DT log not found: " + e);
		}

	    try {
			while ((line = buffer.readLine()) != null) {
			    last = line;
			}
		} catch (IOException e) {
			System.out.println("Write to DT log failed: " + e);
		}
	    
	    return last;
	}
	
	public String readDTLogLastNumLine(int num) {
		BufferedReader buffer = null;
	    String line;
	    String[] lines = new String[num];
		int i = 0;
	    
		try {
			buffer = new BufferedReader(new FileReader(file));
			
		} catch (FileNotFoundException e) {
			System.out.println("DT log not found: " + e);
		}

	    try {
			while ((line = buffer.readLine()) != null) {
				lines[i] = line;
				i++;
				i = i%num;
			}
		} catch (IOException e) {
			System.out.println("Write to DT log failed: " + e);
		}
	    return lines[0];
	}
	
	public String readDTLogLastNLine(int lines) {
	    RandomAccessFile fileHandler = null;
	    try {
	        fileHandler = new RandomAccessFile( new File(file), "r" );
	        long fileLength = fileHandler.length() - 1;
	        StringBuilder sb = new StringBuilder();
	        int line = 0;

	        for(long filePointer = fileLength; filePointer != -1; filePointer--){
	            fileHandler.seek( filePointer );
	            int readByte = fileHandler.readByte();

	            if( readByte == 0xA ) {
	                if (line == lines) {
	                    if (filePointer == fileLength) {
	                        continue;
	                    } else {
	                        break;
	                    }
	                }
	            } else if( readByte == 0xD ) {
	                line = line + 1;
	                if (line == lines) {
	                    if (filePointer == fileLength - 1) {
	                        continue;
	                    } else {
	                        break;
	                    }
	                }
	            }
	           sb.append( ( char ) readByte );
	        }

	        sb.deleteCharAt(sb.length()-1);
	        String lastLine = sb.reverse().toString();
	        return lastLine;
	    } catch( java.io.FileNotFoundException e ) {
	        e.printStackTrace();
	        return null;
	    } catch( java.io.IOException e ) {
	        e.printStackTrace();
	        return null;
	    } finally {
	        if (fileHandler != null )
	            try {
	                fileHandler.close();
	            } catch (IOException e) {
	                /* ignore */
	            }
	    }
	}


}
